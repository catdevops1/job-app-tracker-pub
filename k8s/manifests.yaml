---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: job-tracker

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: job-tracker
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  # storageClassName: your-storage-class  # Uncomment and specify if needed

---
# PostgreSQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: job-tracker
data:
  POSTGRES_DB: jobtracker
  POSTGRES_USER: dbusername  # Change this to your desired username

---
# PostgreSQL Secret (DO NOT COMMIT WITH REAL VALUES)
# Create this secret manually using:
# kubectl create secret generic postgres-secret \
#   --from-literal=POSTGRES_PASSWORD=YOUR_SECURE_PASSWORD \
#   --namespace=job-tracker
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: job-tracker
type: Opaque
data:
  POSTGRES_PASSWORD: ""  # REPLACE: echo -n "your-secure-password" | base64

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: job-tracker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbusername
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbusername
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: job-tracker
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP

---
# Backend ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: job-tracker
data:
  DB_HOST: postgres-service
  DB_PORT: "5432"
  DB_NAME: jobtracker
  DB_USER: dbusername  # Must match POSTGRES_USER above
  PORT: "3001"
  NODE_ENV: production

---
# Backend Secret (DO NOT COMMIT WITH REAL VALUES)
# Create this secret manually using:
# kubectl create secret generic backend-secret \
#   --from-literal=DB_PASSWORD=YOUR_DB_PASSWORD \
#   --from-literal=JWT_SECRET=$(openssl rand -base64 32) \
#   --namespace=job-tracker
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: job-tracker
type: Opaque
data:
  DB_PASSWORD: ""  # REPLACE: echo -n "your-db-password" | base64
  JWT_SECRET: ""   # REPLACE: openssl rand -base64 32 | tr -d '\n' | base64

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: job-tracker-backend
  namespace: job-tracker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: job-tracker-backend
  template:
    metadata:
      labels:
        app: job-tracker-backend
    spec:
      securityContext:
        runAsUser: 1001
        runAsNonRoot: true
        fsGroup: 1001
      imagePullSecrets:
      - name: registry-secret  # Create with: kubectl create secret docker-registry
      containers:
      - name: backend
        image: YOUR_REGISTRY/job-tracker-backend:latest  # REPLACE with your image
        ports:
        - containerPort: 3001
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: job-tracker-backend-service
  namespace: job-tracker
spec:
  selector:
    app: job-tracker-backend
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
  type: ClusterIP

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: job-tracker-frontend
  namespace: job-tracker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: job-tracker-frontend
  template:
    metadata:
      labels:
        app: job-tracker-frontend
    spec:
      securityContext:
        runAsUser: 101  # nginx user
        runAsNonRoot: true
        fsGroup: 101
      imagePullSecrets:
      - name: registry-secret  # Create with: kubectl create secret docker-registry
      containers:
      - name: frontend
        image: YOUR_REGISTRY/job-tracker-frontend:latest  # REPLACE with your image
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: job-tracker-frontend-service
  namespace: job-tracker
spec:
  selector:
    app: job-tracker-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: job-tracker-ingress
  namespace: job-tracker
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - example.com  # REPLACE with your domain
    secretName: job-tracker-tls
  rules:
  - host: example.com  # REPLACE with your domain
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: job-tracker-backend-service
            port:
              number: 3001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: job-tracker-frontend-service
            port:
              number: 80

---
# HPA for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: job-tracker-backend-hpa
  namespace: job-tracker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: job-tracker-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HPA for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: job-tracker-frontend-hpa
  namespace: job-tracker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: job-tracker-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70